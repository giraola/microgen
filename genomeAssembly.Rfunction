genomeAssembly <- function(

			spades,              # Path to spades.py
			reads,               # Path to mergeReads output directory
			threads,             # Number of threads
			outdir,		     # Name for output directory
			outpref,             # Prefix for output files
			maxm=100,	     # RAM limit in Gb
			kmers=c(33,53,73,93) # Vector containing k-mers to try during assembly
		
			) {

			library(random,quietly=T)
			library(seqinr,quietly=T)

			rnd <- randomStrings(n=1,len=5)
			out <- paste0('spades',rnd)

			rds <- gsub('//','/',list.files(reads,full.names=T))
			r1  <- rds[grep('_P1.fastq',rds)]
			r2  <- rds[grep('_P2.fastq',rds)]

			kms <- paste(kmers,collapse=',')

			cmd <- paste0('python ',spades,
				      ' -1 ',r1,' -2 ',r2,
				      ' --careful -m ',maxm,
				      ' -t ',threads,' -k ',
				      kms,' -o ',out)

			system(cmd)

			setwd(out)

			fasta <- read.fasta('scaffolds.fasta')
			nams  <- getName(fasta)
			sequs <- lapply(getSequence(fasta),toupper)
			lens  <- unlist(lapply(sequs,length))
			pass  <- which(lens>=1000)

			pseq  <- sequs[pass]
			nseq  <- nams[pass]

			write.fasta(pseq,names=nseq,file=paste0('../',outname))
			
			setwd('../')
			system(paste0('mkdir ',outdir))
			system(paste0('mv ',outname,' ',outdir))

			nc <- length(pseq)
			le <- unlist(lapply(pseq,length))
			ma <- max(le)
			mi <- min(le)
			su <- sum(le)
			gc <- mean(unlist(lapply(pseq,GC)))*100
			t1 <- rev(sort(le))
			t2 <- cumsum(t1) <= sum(le)/2
			nf <- t1[sum(t2)]
			if (length(nf)==0) {nf <- 0}

			log        <- c(outpref,nc,ma,mi,su,gc,nf)
			names(log) <- c('Assembly',
					'MaxContig',
					'MinContig',
					'TotalLength',
					'N50','%GC')

			saveRDS(log,file=paste0('./',outdir,'/',outpref,'_report.rds'))
}

